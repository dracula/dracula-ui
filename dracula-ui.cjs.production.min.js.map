{"version":3,"file":"dracula-ui.cjs.production.min.js","sources":["../src/base/colors.ts","../src/base/spacing.ts","../src/components/Heading/Heading.tsx","../src/components/Text/Text.tsx","../src/components/Box/Box.tsx","../src/components/Button/Button.tsx","../src/components/Badge/Badge.tsx","../src/components/Avatar/Avatar.tsx","../src/components/Input/Input.tsx","../src/components/Select/Select.tsx","../src/components/Divider/Divider.tsx","../src/components/Radio/Radio.tsx","../src/components/Checkbox/Checkbox.tsx","../src/components/Switch/Switch.tsx","../src/components/Card/Card.tsx","../src/components/Tabs/Tabs.tsx","../src/components/Table/Table.tsx","../src/components/List/List.tsx"],"sourcesContent":["import { mapValues } from 'lodash'\n\nexport const colors = {\n  white: 'drac-bg-white',\n  cyan: 'drac-bg-cyan',\n  green: 'drac-bg-green',\n  orange: 'drac-bg-orange',\n  pink: 'drac-bg-pink',\n  purple: 'drac-bg-purple',\n  red: 'drac-bg-red',\n  yellow: 'drac-bg-yellow',\n  purpleCyan: 'drac-bg-purple-cyan',\n  yellowPink: 'drac-bg-yellow-pink',\n  cyanGreen: 'drac-bg-cyan-green',\n  pinkPurple: 'drac-bg-pink-purple',\n  animated: 'drac-bg-animated'\n}\n\nexport type ColorNames = keyof typeof colors\nexport type ColorMap = Record<ColorNames, string>\n\nexport const borderColors: ColorMap = mapValues(colors, (className) =>\n  className.replace('-bg-', '-border-')\n)\n\nexport const baseTextColors: ColorMap = mapValues(colors, (className) => {\n  return className.replace('-bg-', '-text-')\n})\n","export const spacing = {\n  none: 'drac-spacing-none',\n  noneX: 'drac-spacing-none-x',\n  noneY: 'drac-spacing-none-y',\n  small: 'drac-spacing-sm',\n  smallX: 'drac-spacing-sm-x',\n  smallY: 'drac-spacing-sm-y',\n  medium: 'drac-spacing-md',\n  mediumX: 'drac-spacing-md-x',\n  mediumY: 'drac-spacing-md-y',\n  large: 'drac-spacing-lg',\n  largeX: 'drac-spacing-lg-x',\n  largeY: 'drac-spacing-lg-y'\n}\n\nexport type SpacingPropType = keyof typeof spacing | Array<keyof typeof spacing>\n\nexport function spacingClasses(input?: SpacingPropType): string[] {\n  let spacingInput = input ?? []\n\n  if (!Array.isArray(spacingInput)) {\n    spacingInput = [spacingInput]\n  }\n\n  spacingInput = spacingInput as Array<keyof typeof spacing>\n\n  return spacingInput.map((spc) => {\n    return spacing[spc]\n  })\n}\n","import cx from 'classnames'\nimport { mapValues } from 'lodash'\nimport React, { HTMLAttributes } from 'react'\nimport { colors } from '../../base/colors'\nimport { spacingClasses, SpacingPropType } from '../../base/spacing'\n\nexport const headingSizes = {\n  'heading-1': 'drac-heading-1',\n  'heading-2': 'drac-heading-2',\n  'heading-3': 'drac-heading-3',\n  'heading-4': 'drac-heading-4',\n  'heading-5': 'drac-heading-5',\n  'heading-6': 'drac-heading-6'\n}\n\nexport const headingColors = mapValues(colors, (className) => {\n  return className.replace('-bg-', '-text-')\n})\n\n/** Heading Props */\nexport interface HeadingProps extends HTMLAttributes<HTMLHeadingElement> {\n  /**\n   * The size and type of Heading to be used.\n   * Denotes hierarchy.\n   */\n  size?: keyof typeof headingSizes\n\n  /**\n   * The Dracula UI color to be applied to the Heading.\n   */\n  color?: keyof typeof headingColors\n\n  /**\n   * Controls the spacing between the Heading component and its parent and siblings.\n   */\n  spacing?: SpacingPropType\n}\n\n/**\n * Heading is used to display headlines and other forms of hierarchical Text.\n *\n * Headings are similar to the base Text component, but restricted to certain\n * sizes and font weight.\n */\nexport const Heading: React.FC<HeadingProps> = (props: HeadingProps) => {\n  const tag = {\n    'heading-1': 'h1',\n    'heading-2': 'h2',\n    'heading-3': 'h3',\n    'heading-4': 'h4',\n    'heading-5': 'h5',\n    'heading-6': 'h6'\n  }\n\n  const size = tag[props.size ?? 'heading-1']\n  const finalProps = {\n    ...props,\n    className: cx(\n      `drac-heading`,\n      headingSizes[props.size ?? 'heading-1'],\n      headingColors[props.color ?? 'white'],\n      ...spacingClasses(props.spacing ?? 'none')\n    )\n  }\n\n  return React.createElement(size, finalProps, props.children)\n}\n\nHeading.displayName = 'Heading'\n","import React, { HTMLAttributes } from 'react'\nimport { mapValues } from 'lodash'\nimport cx from 'classnames'\nimport { spacingClasses, SpacingPropType } from '../../base/spacing'\nimport { baseTextColors } from '../../base/colors'\n\nexport const textSizes = {\n  large: 'drac-text-lg',\n  medium: 'drac-text',\n  small: 'drac-text-sm',\n  xsmall: 'drac-text-xs'\n}\n\nexport const textWeights = {\n  normal: 'drac-text',\n  semibold: 'drac-text-semibold',\n  bold: 'drac-text-bold'\n}\n\nexport const textColors = mapValues(baseTextColors, (className) => {\n  return className.replace('-bg-', '-text-')\n})\n\n/** Text Props */\nexport interface TextProps extends HTMLAttributes<HTMLSpanElement> {\n  /**\n   * Controls the size of the text based on pre-configured Dracula UI sizes.\n   * Options: `xsmall`, `small`, `medium`, `large`\n   */\n  size?: keyof typeof textSizes\n\n  /**\n   * Controsl the weight of the text.\n   * Options: `normal`, `semibold`, `bold`.\n   */\n  weight?: keyof typeof textWeights\n\n  /**\n   * Controls the color of the text\n   */\n  color?: keyof typeof textColors\n\n  /**\n   * Controls the spacing between the Text component and its parent and siblings.\n   */\n  spacing?: SpacingPropType\n}\n\n/**\n * Text is the base component for any sort of text.\n *\n * Consumers of this component can control, the color, size,\n * weight, and spacing of Text.\n *\n * Use this component for generic, and non-hierarchical text that is\n * to be displayed on a page, or as part of other complex components\n * or UI patterns\n */\nexport const Text = (props: TextProps) => {\n  const finalProps = {\n    ...props,\n\n    className: cx(\n      `drac-text`,\n      textSizes[props.size ?? 'medium'],\n      textWeights[props.weight ?? 'normal'],\n      textColors[props.color ?? 'white'],\n      spacingClasses(props.spacing)\n    )\n  }\n\n  return <span {...finalProps}>{props.children}</span>\n}\n\n/**\n * Paragraph is a semantic component used for blocks of text with\n * semantic meaning.\n *\n * Paragraph accepts all the same customization options as Text.\n */\nexport const Paragraph: React.FC<TextProps> = (props: TextProps) => {\n  const finalProps = {\n    ...props,\n\n    className: cx(\n      `drac-text`,\n      textSizes[props.size ?? 'medium'],\n      textWeights[props.weight ?? 'normal'],\n      textColors[props.color ?? 'white'],\n      spacingClasses(props.spacing ?? 'smallY')\n    )\n  }\n\n  return <p {...finalProps}>{props.children}</p>\n}\n\nText.displayName = 'Text'\n","import React, { HTMLAttributes } from 'react'\nimport cx from 'classnames'\nimport { spacingClasses, SpacingPropType } from '../../base/spacing'\nimport { colors } from '../../base/colors'\n\n/**\n * Box Props\n */\nexport interface BoxProps extends HTMLAttributes<HTMLDivElement> {\n  /** The background color. */\n  color?: keyof typeof colors\n\n  /** Dracula UI standard spacing properties. */\n  spacing?: SpacingPropType\n}\n\n/**\n * Box is the most primitive component of Dracula UI.\n * Using Box allows for consumers of the components library to compose\n * more complex patterns, components, and UIs.\n *\n * Box includes built-in Color and Spacing properties that make building\n * complex components convenient and consistent.\n */\nexport const Box: React.FC<BoxProps> = (props: BoxProps) => {\n  const finalProps = {\n    ...props,\n    className: cx(\n      `drac-box`,\n      props.color && colors[props.color],\n      ...spacingClasses(props.spacing),\n      props.className\n    )\n  }\n\n  return <div {...finalProps} />\n}\n\nBox.displayName = 'Box'\n","import React, { HTMLAttributes } from 'react'\nimport { colors as backgroundColors } from '../../base/colors'\nimport cx from 'classnames'\nimport { textColors } from '../../components/Text/Text'\n\nexport const buttonVariants = {\n  normal: 'drac-btn',\n  outline: 'drac-btn-outline',\n  ghost: 'drac-btn-ghost'\n}\n\nexport const buttonSizes = {\n  large: 'drac-btn-lg',\n  medium: 'drac-btn',\n  small: 'drac-btn-sm',\n  xsmall: 'drac-btn-xs'\n}\n\n/** Button Props */\nexport interface ButtonProps extends HTMLAttributes<HTMLButtonElement> {\n  /** A Dracula UI theme color for the Button. */\n  color?: keyof typeof backgroundColors\n\n  /**\n   * Controls the size of the button based on pre-configured Dracula UI sizes.\n   * Options: `xsmall`, `small`, `medium`, `large`\n   */\n  size?: keyof typeof buttonSizes\n\n  /**\n   * Controls the Button style:\n   * `normal` -> Default solid Button with background color.\n   * `outline` -> A subtle variation of the Button component with a softer background color that highlights the action text.\n   * `ghost` -> A less prominent variation of the Button component that highlights hover interactions.\n   */\n  variant?: keyof typeof buttonVariants\n\n  /**\n   * Controls the Button state. Mirrors the HTMLButtonElement `disabled` property.\n   */\n  disabled?: boolean\n}\n\n/**\n * The Button component triggers actions, behaviors, or events based\n * on user input.\n */\nexport const Button: React.FC<ButtonProps> = (props: ButtonProps) => {\n  const isOutline = props.variant === 'outline'\n  const isGhost = props.variant === 'ghost'\n  const overrideTextColor = isOutline || isGhost\n\n  const textColorClass = overrideTextColor\n    ? textColors[props.color ?? 'green']\n    : undefined\n\n  let backgroundClass = backgroundColors[props.color ?? 'green']\n  if (isGhost) {\n    backgroundClass = `${backgroundClass}-transparent`\n  }\n\n  const classes = cx(\n    'drac-btn',\n    backgroundClass,\n    buttonVariants[props.variant ?? 'normal'],\n    buttonSizes[props.size ?? 'medium'],\n    textColorClass\n  )\n\n  return (\n    <button className={classes} {...props}>\n      {props.children}\n    </button>\n  )\n}\n\nButton.displayName = 'Button'\n","import React, { HTMLAttributes } from 'react'\nimport { colors as backgroundColors } from '../../base/colors'\nimport { Text, textColors } from '../../components/Text/Text'\nimport cx from 'classnames'\n\nconst variants = {\n  normal: 'drac-badge',\n  subtle: 'drac-badge-subtle',\n  outline: 'drac-badge-outline'\n}\n\n/**\n * Badge Props\n */\nexport interface BadgeProps extends HTMLAttributes<HTMLSpanElement> {\n  /**\n   * The theme variation color for a badge.\n   */\n  themeColor?: keyof typeof backgroundColors\n\n  /**\n   * The variants for the Badge components.\n   * `normal` -> Default solid badge.\n   * `subtle` -> Subtler background, highlights the text.\n   * `outline` -> No background color, just borders and text.\n   */\n  variant?: keyof typeof variants\n}\n\n/**\n * Badges are used to denote status or to highlight specific\n * information.\n */\nexport const Badge: React.FC<BadgeProps> = (props: BadgeProps) => {\n  const isOutline = props.variant === 'outline'\n  const isSubtle = props.variant === 'subtle'\n  const overrideTextColor = isOutline || isSubtle\n\n  const textColorClass = overrideTextColor\n    ? textColors[props.themeColor ?? 'green']\n    : undefined\n\n  let backgroundClass = backgroundColors[props.themeColor ?? 'green']\n  if (isSubtle) {\n    backgroundClass = `${backgroundClass}-transparent`\n  }\n\n  const classes = cx(\n    'drac-badge',\n    backgroundClass,\n    variants[props.variant ?? 'normal'],\n    textColorClass\n  )\n\n  return (\n    <span className={classes} {...props}>\n      <Text color={overrideTextColor ? props.themeColor : undefined}>\n        {props.children}\n      </Text>\n    </span>\n  )\n}\n\nBadge.displayName = 'Badge'\n","import cx from 'classnames'\nimport { first, last } from 'lodash'\nimport React, { HTMLAttributes } from 'react'\nimport { colors as backgroundColors } from '../../base/colors'\nimport { Text, textColors } from '../../components/Text/Text'\n\nexport const AvatarVariants = {\n  normal: 'drac-avatar',\n  subtle: 'drac-avatar-subtle'\n}\n\nexport const AvatarBorderVariants = {\n  normal: '',\n  large: 'drac-avatar-lg-stroke',\n  none: 'drac-avatar-no-border'\n}\n\n/** Avatar Props */\nexport interface AvatarProps\n  extends HTMLAttributes<HTMLSpanElement & HTMLImageElement> {\n  /**\n   * The title or name to be used in the avatar.\n   */\n  title: string\n\n  /**\n   * The theme color for the avatar.\n   * This property controls the border and glow colors for the component.\n   */\n  themeColor?: keyof typeof backgroundColors\n\n  /**\n   * The variant property allows for consumers to choose from\n   * a regular avatar, or a subtle variation.\n   */\n  variant?: keyof typeof AvatarVariants\n\n  /**\n   * Allows for controlling the border of the avatar.\n   * `large` -> to use a thicker border.\n   * `none` -> hides the border.\n   */\n  borderVariant?: keyof typeof AvatarBorderVariants\n\n  /**\n   * Sets the source for the profile picture.\n   */\n  src?: string\n}\n\n/**\n * The Avatar component is used to represent a user.\n *\n * It displays a profile picture, or falls back to the user's initials\n * if a profile pic is not provided.\n */\nexport const Avatar = (props: AvatarProps) => {\n  const { themeColor, variant, borderVariant, src, title, ...htmlProps } = props\n\n  const backgroundClass = `${\n    backgroundColors[themeColor ?? 'green']\n  }-transparent`\n\n  const classes = cx(\n    'drac-avatar',\n    backgroundClass,\n    textColors[themeColor ?? 'green'],\n    AvatarVariants[variant ?? 'normal'],\n    AvatarBorderVariants[borderVariant ?? 'normal']\n  )\n  const names = props.title.split(' ')\n\n  const f = first(names)?.slice(0, 1)\n  const l = last(names)?.slice(0, 1)\n\n  const style: React.HTMLAttributes<HTMLSpanElement>['style'] = {\n    ...props.style\n  }\n\n  if (props.src) {\n    style.backgroundImage = `url('${props.src}')`\n  }\n\n  return (\n    <span className={classes} style={style} {...htmlProps}>\n      {!props.src && (\n        <Text color={props.themeColor ?? 'white'}>\n          {f}\n          {l}\n        </Text>\n      )}\n    </span>\n  )\n}\n\nAvatar.displayName = 'Avatar'\n","import { ColorMap } from '../../base/colors'\nimport React, { HTMLAttributes } from 'react'\nimport cx from 'classnames'\n\nexport const inputVariants = {\n  normal: 'drac-input',\n  outline: 'drac-input-outline'\n}\n\nexport const inputSizes = {\n  large: 'drac-input-lg',\n  medium: 'drac-input',\n  small: 'drac-input-sm'\n}\n\nexport const inputColors: ColorMap = {\n  white: 'drac-input-white drac-text-white',\n  cyan: 'drac-input-cyan drac-text-cyan',\n  green: 'drac-input-green drac-text-green',\n  orange: 'drac-input-orange drac-text-orange',\n  pink: 'drac-input-pink drac-text-pink',\n  purple: 'drac-input-purple drac-text-purple',\n  red: 'drac-input-red drac-text-red',\n  yellow: 'drac-input-yellow drac-text-yellow',\n  animated: '',\n  cyanGreen: '',\n  pinkPurple: '',\n  purpleCyan: '',\n  yellowPink: ''\n}\n\n/** Input Props */\nexport interface InputProps extends HTMLAttributes<HTMLInputElement> {\n  /**\n   * The Dracula UI theme color to be used\n   */\n  color?: keyof typeof inputColors\n\n  /**\n   * Controls the size of the input based on pre-configured Dracula UI sizes.\n   * Options: `small`, `medium`, `large`\n   */\n  size?: keyof typeof inputSizes\n\n  /**\n   * Controls the variation the input.\n   * `normal` -> Regular Input component with a light background color.\n   * `outline` -> Keeps the accent color, but removes the background.\n   */\n  variant?: keyof typeof inputVariants\n}\n\n/**\n * Input is a styled HTML Input.\n *\n * There are no behavior changes applied to the native HTML tag other\n * than light styling done via CSS in order to keep inputs accessible.\n */\nexport const Input: React.FC<InputProps> = (props: InputProps) => {\n  const finalProps = {\n    ...props,\n    className: cx(\n      `drac-input`,\n      props.variant && inputVariants[props.variant],\n      props.size && inputSizes[props.size],\n      props.color && inputColors[props.color]\n    )\n  }\n\n  const { size, ...cleanProps } = finalProps\n  return <input {...cleanProps} />\n}\n\nInput.displayName = 'Input'\n","import { ColorMap } from '../../base/colors'\nimport React, { HTMLAttributes } from 'react'\nimport cx from 'classnames'\n\nexport const selectVariants = {\n  normal: 'drac-select',\n  outline: 'drac-select-outline'\n}\n\nexport const selectSizes = {\n  large: 'drac-select-lg',\n  medium: 'drac-select',\n  small: 'drac-select-sm'\n}\n\nexport const selectColors: ColorMap = {\n  white: 'drac-select-white',\n  cyan: 'drac-select-cyan',\n  green: 'drac-select-green',\n  orange: 'drac-select-orange',\n  pink: 'drac-select-pink',\n  purple: 'drac-select-purple',\n  red: 'drac-select-red',\n  yellow: 'drac-select-yellow',\n  animated: '',\n  cyanGreen: '',\n  pinkPurple: '',\n  purpleCyan: '',\n  yellowPink: ''\n}\n\n/** Select Props */\nexport interface SelectProps extends HTMLAttributes<HTMLSelectElement> {\n  /** The Dracula UI theme color for the Select. */\n  color?: keyof typeof selectColors\n\n  /**\n   * Controls the size of the select based on pre-configured Dracula UI sizes.\n   * Options: `small`, `medium`, `large`\n   */\n  size?: keyof typeof selectSizes\n\n  /**\n   * The variation to be used for the Select element.\n   * `normal` -> Regular Select component with a light background color.\n   * `outline` -> Keeps the accent color, but removes the background.\n   */\n  variant?: keyof typeof selectVariants\n\n  disabled?: boolean\n}\n\n/**\n * Select is a styled HTML Select element.\n *\n * There are no behavior changes applied to the native HTML tag other\n * than light styling done via CSS, and small SVG component in order to keep Selects accessible.\n */\nexport const Select: React.FC<SelectProps> = (props: SelectProps) => {\n  const finalProps = {\n    ...props,\n    className: cx(\n      'drac-select',\n      props.variant && selectVariants[props.variant],\n      props.size && selectSizes[props.size],\n      props.color && selectColors[props.color]\n    )\n  }\n\n  const { size, ...cleanProps } = finalProps\n\n  return (\n    <div style={{ position: 'relative' }}>\n      <select {...cleanProps} />\n      <div className={`drac-select-arrow drac-text-${props.color}`}>\n        <svg\n          viewBox=\"0 0 24 24\"\n          focusable=\"false\"\n          role=\"presentation\"\n          aria-hidden=\"true\"\n        >\n          <path\n            fill=\"currentColor\"\n            d=\"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z\"\n          ></path>\n        </svg>\n      </div>\n    </div>\n  )\n}\n\nSelect.displayName = 'Select'\n","import { borderColors } from '../../base/colors'\nimport React, { HTMLAttributes } from 'react'\n\nexport const dividerColors = borderColors\n\n/**\n * Divider Props\n */\nexport interface DividerProps extends HTMLAttributes<HTMLDivElement> {\n  /** The Dracula UI color for the Divider. */\n  color: keyof typeof dividerColors\n}\n\n/**\n * Dividers are horizontal lines used to separate semantic blocks of\n * content or UI patterns.\n */\nexport const Divider: React.FC<DividerProps> = (props: DividerProps) => {\n  const finalProps = {\n    ...props,\n    className: `drac-divider ${dividerColors[props.color]}`\n  }\n\n  return <hr {...finalProps} />\n}\n\nDivider.displayName = 'Divider'\n","import { ColorMap } from '../../base/colors'\nimport React, { HTMLAttributes } from 'react'\n\nexport const radioColors: ColorMap = {\n  white: 'drac-radio-white',\n  cyan: 'drac-radio-cyan',\n  green: 'drac-radio-green',\n  orange: 'drac-radio-orange',\n  pink: 'drac-radio-pink',\n  purple: 'drac-radio-purple',\n  red: 'drac-radio-red',\n  yellow: 'drac-radio-yellow',\n  animated: '',\n  cyanGreen: '',\n  pinkPurple: '',\n  purpleCyan: '',\n  yellowPink: ''\n}\n\n/** Radio Props */\nexport interface RadioProps extends HTMLAttributes<HTMLInputElement> {\n  /** The Dracula UI theme color for the radio button. */\n  color: keyof typeof radioColors\n\n  /** The name of the radio. Mirrors the name HTML attribute. */\n  name?: string\n}\n\n/**\n * Radio is a styled HTML Input of type radio.\n *\n * There are no behavior changes applied to the native HTML tag other\n * than light styling done via CSS in order to keep Radios accessible.\n */\nexport const Radio: React.FC<RadioProps> = (props: RadioProps) => {\n  const finalProps = {\n    ...props,\n    className: `drac-radio ${radioColors[props.color]}`\n  }\n\n  return <input type=\"radio\" {...finalProps} />\n}\n\nRadio.displayName = 'Radio'\n","import React, { HTMLAttributes } from 'react'\nimport cx from 'classnames'\nimport { ColorMap } from '../../base/colors'\n\nexport const checkboxColors: ColorMap = {\n  white: 'drac-checkbox-white',\n  cyan: 'drac-checkbox-cyan',\n  green: 'drac-checkbox-green',\n  orange: 'drac-checkbox-orange',\n  pink: 'drac-checkbox-pink',\n  purple: 'drac-checkbox-purple',\n  red: 'drac-checkbox-red',\n  yellow: 'drac-checkbox-yellow',\n  animated: '',\n  cyanGreen: '',\n  pinkPurple: '',\n  purpleCyan: '',\n  yellowPink: ''\n}\n\n/** Checkbox Props */\nexport interface CheckboxProps extends HTMLAttributes<HTMLInputElement> {\n  /** The Dracula UI theme color for the checkbox. */\n  color?: keyof typeof checkboxColors\n  /** The name of the checkbox. Mirrors the name HTML attribute. */\n  name?: string\n\n  disabled?: boolean\n}\n\n/**\n * Checkbox is a styled HTML Input of type checkbox.\n *\n * There are no behavior changes applied to the native HTML tag other\n * than light styling done via CSS in order to keep check boxes accessible.\n */\nexport const Checkbox: React.FC<CheckboxProps> = (props: CheckboxProps) => {\n  const finalProps = {\n    ...props,\n    className: cx(`drac-checkbox`, props.color && checkboxColors[props.color])\n  }\n\n  return <input type=\"checkbox\" {...finalProps} />\n}\n\nCheckbox.displayName = 'Checkbox'\n","import { ColorMap } from '../../base/colors'\nimport React, { HTMLAttributes } from 'react'\n\nexport const switchColors: ColorMap = {\n  white: 'drac-switch-white',\n  cyan: 'drac-switch-cyan',\n  green: 'drac-switch-green',\n  orange: 'drac-switch-orange',\n  pink: 'drac-switch-pink',\n  purple: 'drac-switch-purple',\n  red: 'drac-switch-red',\n  yellow: 'drac-switch-yellow',\n  animated: '',\n  cyanGreen: '',\n  pinkPurple: '',\n  purpleCyan: '',\n  yellowPink: ''\n}\n\n/** Switch Props. */\nexport interface SwitchProps extends HTMLAttributes<HTMLInputElement> {\n  /** The name of the form element. */\n  name?: string\n\n  /**\n   * The Dracula UI theme color to be applied to the Switch.\n   */\n  color: keyof typeof switchColors\n\n  disabled?: boolean\n}\n\n/**\n * Switch is an abstraction pattern that represents toggles.\n *\n * Use the Switch component as an alternative for Checkboxes or Radios\n * when options are binary.\n *\n * Switches are implemented as Checkboxes under the hood,\n * and work normally with forms.\n */\nexport const Switch: React.FC<SwitchProps> = (props: SwitchProps) => {\n  const finalProps = {\n    ...props,\n    className: `drac-switch drac-checkbox ${switchColors[props.color]}`\n  }\n\n  return <input type=\"checkbox\" {...finalProps} />\n}\n\nSwitch.displayName = 'Switch'\n","import React from 'react'\nimport { Box, BoxProps } from '../../components/Box/Box'\nimport { borderColors } from '../../base/colors'\nimport cx from 'classnames'\n\nexport const cardOrientations = {\n  normal: '',\n  portrait: 'drac-card-portrait'\n}\nexport type CardOrientationProps = keyof typeof cardOrientations\n\nexport const cardVariants = {\n  normal: '',\n  subtle: 'drac-card-subtle'\n}\nexport type CardVariantProps = keyof typeof cardVariants\n\n/** Card Props */\nexport interface CardProps extends BoxProps {\n  /**\n   * Shortcut property that makes it convenient to orient a card vertically or horizontally.\n   * `normal` -> Orients the Card horizontally in landscape format.\n   * `portrait` -> Orients the Card vertically.\n   */\n  orientation?: CardOrientationProps\n\n  /**\n   * The Card display variant.\n   * `normal` -> Applies the chosen background color with dark text.\n   * `subtle` -> Inverts the theme color, and adds a slight glow to the Card. Use this when you don't want all your cards to stand out.\n   */\n  variant?: CardVariantProps\n}\n\n/**\n * Card is a high level Pattern Component use to group\n * related or hierarchical information.\n */\nexport const Card: React.FC<CardProps> = (props: CardProps) => {\n  const classNames = cx(\n    'drac-card',\n    props.className,\n    props.orientation && cardOrientations[props.orientation],\n    props.variant && cardVariants[props.variant],\n    // apply border color based on theme color\n    props.color && props.variant && borderColors[props.color]\n  )\n\n  return (\n    <Box {...props} className={classNames}>\n      {props.children}\n    </Box>\n  )\n}\n\nCard.displayName = 'Card'\n","import { ColorMap } from '../../base/colors'\nimport React, { HTMLAttributes } from 'react'\nimport cx from 'classnames'\n\nexport const tabsColors: ColorMap = {\n  white: 'drac-tabs-white',\n  cyan: 'drac-tabs-cyan',\n  green: 'drac-tabs-green',\n  orange: 'drac-tabs-orange',\n  pink: 'drac-tabs-pink',\n  purple: 'drac-tabs-purple',\n  red: 'drac-tabs-red',\n  yellow: 'drac-tabs-yellow',\n  animated: '',\n  cyanGreen: '',\n  pinkPurple: '',\n  purpleCyan: '',\n  yellowPink: ''\n}\n\n/**\n * Tabs Props\n */\nexport interface TabsProps extends HTMLAttributes<HTMLUListElement> {\n  /** The Dracula UI color for the Tabs. */\n  color: keyof typeof tabsColors\n}\n\n/**\n * Tabs are horizontal navigation elements used to display\n * content within the same page.\n */\nexport const Tabs: React.FC<TabsProps> = (props: TabsProps) => {\n  const finalProps = {\n    ...props,\n    className: cx('drac-tabs', props.color && tabsColors[props.color])\n  }\n\n  return <ul {...finalProps} />\n}\n\nTabs.displayName = 'Tabs'\n","import { ColorMap } from '../../base/colors'\nimport React, { HTMLAttributes } from 'react'\nimport cx from 'classnames'\n\nexport const tableColors: ColorMap = {\n  white: 'drac-table-white',\n  cyan: 'drac-table-cyan',\n  green: 'drac-table-green',\n  orange: 'drac-table-orange',\n  pink: 'drac-table-pink',\n  purple: 'drac-table-purple',\n  red: 'drac-table-red',\n  yellow: 'drac-table-yellow',\n  animated: '',\n  cyanGreen: '',\n  pinkPurple: '',\n  purpleCyan: '',\n  yellowPink: ''\n}\n\nexport const tableVariants = {\n  normal: 'drac-table',\n  striped: 'drac-table-striped'\n}\n\n/**\n * Table Props\n */\nexport interface TableProps extends HTMLAttributes<HTMLTableElement> {\n  /** The Dracula UI color for the Table. */\n  color?: keyof typeof tableColors\n\n  /**\n   * The variation to be used for the Table element.\n   * `normal` -> Regular Table component without background colors.\n   * `striped` -> Changes the background color of each even row.\n   */\n  variant?: keyof typeof tableVariants\n}\n\n/**\n * Tables are horizontal lines used to separate semantic blocks of\n * content or UI patterns.\n */\nexport const Table: React.FC<TableProps> = (props: TableProps) => {\n  const finalProps = {\n    ...props,\n    className: cx(\n      'drac-table',\n      props.variant && tableVariants[props.variant],\n      props.color && tableColors[props.color]\n    )\n  }\n\n  return <table {...finalProps} />\n}\n\nTable.displayName = 'Table'\n","import { ColorMap } from '../../base/colors'\nimport React, { HTMLAttributes } from 'react'\nimport cx from 'classnames'\n\nexport const listColors: ColorMap = {\n  white: 'drac-list-white',\n  cyan: 'drac-list-cyan',\n  green: 'drac-list-green',\n  orange: 'drac-list-orange',\n  pink: 'drac-list-pink',\n  purple: 'drac-list-purple',\n  red: 'drac-list-red',\n  yellow: 'drac-list-yellow',\n  animated: '',\n  cyanGreen: '',\n  pinkPurple: '',\n  purpleCyan: '',\n  yellowPink: ''\n}\n\nexport const listVariants = {\n  unordered: 'drac-list-unordered',\n  ordered: 'drac-list-ordered'\n}\n\n/**\n * List Props\n */\nexport interface ListProps extends HTMLAttributes<HTMLOListElement> {\n  /** The Dracula UI color for the List. */\n  color: keyof typeof listColors\n\n  /**\n   * The variation to be used for the List element.\n   * `unordered` -> Display list in dashes as an `<ul>`\n   * `ordered` -> Display list in numbers as an `<ol>`\n   */\n  variant?: keyof typeof listVariants\n}\n\n/**\n * Lists are horizontal lines used to separate semantic blocks of\n * content or UI patterns.\n */\nexport const List: React.FC<ListProps> = (props: ListProps) => {\n  const finalProps = {\n    ...props,\n    className: cx(\n      'drac-list',\n      props.variant && listVariants[props.variant],\n      props.color && listColors[props.color]\n    )\n  }\n\n  if (props.variant === 'unordered') {\n    return <ul {...finalProps} />\n  }\n\n  return <ol {...finalProps} />\n}\n\nList.displayName = 'List'\n"],"names":["colors","white","cyan","green","orange","pink","purple","red","yellow","purpleCyan","yellowPink","cyanGreen","pinkPurple","animated","borderColors","mapValues","className","replace","baseTextColors","spacing","none","noneX","noneY","small","smallX","smallY","medium","mediumX","mediumY","large","largeX","largeY","spacingClasses","input","spacingInput","Array","isArray","map","spc","headingSizes","headingColors","Heading","props","size","finalProps","cx","color","React","createElement","children","displayName","textSizes","xsmall","textWeights","normal","semibold","bold","textColors","Text","weight","Box","buttonVariants","outline","ghost","buttonSizes","Button","isGhost","variant","textColorClass","undefined","backgroundClass","backgroundColors","classes","variants","subtle","Badge","isSubtle","overrideTextColor","themeColor","AvatarVariants","AvatarBorderVariants","Avatar","borderVariant","src","names","title","split","f","first","_first","slice","l","last","_last","style","backgroundImage","htmlProps","inputVariants","inputSizes","inputColors","Input","cleanProps","selectVariants","selectSizes","selectColors","Select","position","viewBox","focusable","role","fill","d","dividerColors","Divider","radioColors","Radio","type","checkboxColors","Checkbox","switchColors","Switch","cardOrientations","portrait","cardVariants","Card","classNames","orientation","tabsColors","Tabs","tableColors","tableVariants","striped","Table","listColors","listVariants","unordered","ordered","List"],"mappings":"siBAEO,IAAMA,EAAS,CACpBC,MAAO,gBACPC,KAAM,eACNC,MAAO,gBACPC,OAAQ,iBACRC,KAAM,eACNC,OAAQ,iBACRC,IAAK,cACLC,OAAQ,iBACRC,WAAY,sBACZC,WAAY,sBACZC,UAAW,qBACXC,WAAY,sBACZC,SAAU,oBAMCC,EAAyBC,YAAUf,GAAQ,SAACgB,UACvDA,EAAUC,QAAQ,OAAQ,eAGfC,EAA2BH,YAAUf,GAAQ,SAACgB,UAClDA,EAAUC,QAAQ,OAAQ,aC1BtBE,EAAU,CACrBC,KAAM,oBACNC,MAAO,sBACPC,MAAO,sBACPC,MAAO,kBACPC,OAAQ,oBACRC,OAAQ,oBACRC,OAAQ,kBACRC,QAAS,oBACTC,QAAS,oBACTC,MAAO,kBACPC,OAAQ,oBACRC,OAAQ,8BAKMC,EAAeC,OACzBC,QAAeD,EAAAA,EAAS,UAEvBE,MAAMC,QAAQF,KACjBA,EAAe,CAACA,KAGlBA,EAAeA,GAEKG,KAAI,SAACC,UAChBnB,EAAQmB,UCrBNC,EAAe,aACb,6BACA,6BACA,6BACA,6BACA,6BACA,kBAGFC,EAAgBzB,YAAUf,GAAQ,SAACgB,UACvCA,EAAUC,QAAQ,OAAQ,aA4BtBwB,EAAkC,SAACC,eAUxCC,EATM,aACG,iBACA,iBACA,iBACA,iBACA,iBACA,eAGED,EAAMC,QAAQ,aACzBC,OACDF,GACH1B,UAAW6B,+BAETN,WAAaG,EAAMC,QAAQ,aAC3BH,WAAcE,EAAMI,SAAS,iBAC1Bd,WAAeU,EAAMvB,WAAW,mBAIhC4B,EAAMC,cAAcL,EAAMC,EAAYF,EAAMO,WAGrDR,EAAQS,YAAc,cC9DTC,EAAY,CACvBtB,MAAO,eACPH,OAAQ,YACRH,MAAO,eACP6B,OAAQ,gBAGGC,EAAc,CACzBC,OAAQ,YACRC,SAAU,qBACVC,KAAM,kBAGKC,EAAa1C,YAAUG,GAAgB,SAACF,UAC5CA,EAAUC,QAAQ,OAAQ,aAsCtByC,EAAO,SAAChB,aACbE,OACDF,GAEH1B,UAAW6B,cAETM,WAAUT,EAAMC,QAAQ,UACxBU,WAAYX,EAAMiB,UAAU,UAC5BF,WAAWf,EAAMI,SAAS,SAC1Bd,EAAeU,EAAMvB,mBAIlB4B,wCAAUH,GAAaF,EAAMO,WAyBtCS,EAAKR,YAAc,WCxENU,EAA0B,SAAClB,OAChCE,OACDF,GACH1B,UAAW6B,2BAETH,EAAMI,OAAS9C,EAAO0C,EAAMI,eACzBd,EAAeU,EAAMvB,UACxBuB,EAAM1B,sBAIH+B,uCAASH,KAGlBgB,EAAIV,YAAc,UCjCLW,EAAiB,CAC5BP,OAAQ,WACRQ,QAAS,mBACTC,MAAO,kBAGIC,EAAc,CACzBnC,MAAO,cACPH,OAAQ,WACRH,MAAO,cACP6B,OAAQ,eAgCGa,EAAgC,SAACvB,eAEtCwB,EAA4B,UAAlBxB,EAAMyB,QAGhBC,EAJ8B,YAAlB1B,EAAMyB,SAEeD,EAGnCT,WAAWf,EAAMI,SAAS,cAC1BuB,EAEAC,EAAkBC,WAAiB7B,EAAMI,SAAS,SAClDoB,IACFI,uBAGIE,EAAU3B,EACd,WACAyB,EACAT,WAAenB,EAAMyB,WAAW,UAChCH,WAAYtB,EAAMC,QAAQ,UAC1ByB,UAIArB,wCAAQ/B,UAAWwD,GAAa9B,GAC7BA,EAAMO,WAKbgB,EAAOf,YAAc,aCvEfuB,EAAW,CACfnB,OAAQ,aACRoB,OAAQ,oBACRZ,QAAS,sBAyBEa,EAA8B,SAACjC,aAEpCkC,EAA6B,WAAlBlC,EAAMyB,QACjBU,EAF8B,YAAlBnC,EAAMyB,SAEeS,EAEjCR,EAAiBS,EACnBpB,WAAWf,EAAMoC,cAAc,cAC/BT,EAEAC,EAAkBC,WAAiB7B,EAAMoC,cAAc,SACvDF,IACFN,uBAGIE,EAAU3B,EACd,aACAyB,EACAG,WAAS/B,EAAMyB,WAAW,UAC1BC,UAIArB,sCAAM/B,UAAWwD,GAAa9B,GAC5BK,gBAACW,GAAKZ,MAAO+B,EAAoBnC,EAAMoC,gBAAaT,GACjD3B,EAAMO,YAMf0B,EAAMzB,YAAc,YCzDP6B,EAAiB,CAC5BzB,OAAQ,cACRoB,OAAQ,sBAGGM,EAAuB,CAClC1B,OAAQ,GACRzB,MAAO,wBACPT,KAAM,yBA0CK6D,EAAS,SAACvC,aACboC,EAAiEpC,EAAjEoC,WAAYX,EAAqDzB,EAArDyB,QAASe,EAA4CxC,EAA5CwC,cAAeC,IAA6BzC,0DAMnE8B,EAAU3B,EACd,cAJA0B,QAAiBO,EAAAA,EAAc,wBAM/BrB,QAAWqB,EAAAA,EAAc,SACzBC,QAAeZ,EAAAA,EAAW,UAC1Ba,QAAqBE,EAAAA,EAAiB,WAElCE,EAAQ1C,EAAM2C,MAAMC,MAAM,KAE1BC,WAAIC,QAAMJ,WAANK,EAAcC,MAAM,EAAG,GAC3BC,WAAIC,OAAKR,WAALS,EAAaH,MAAM,EAAG,GAE1BI,OACDpD,EAAMoD,cAGPpD,EAAMyC,MACRW,EAAMC,wBAA0BrD,EAAMyC,UAItCpC,sCAAM/B,UAAWwD,EAASsB,MAAOA,GAAWE,IACxCtD,EAAMyC,KACNpC,gBAACW,GAAKZ,eAAOJ,EAAMoC,cAAc,SAC9BS,EACAI,KAOXV,EAAO/B,YAAc,aC3FR+C,EAAgB,CAC3B3C,OAAQ,aACRQ,QAAS,sBAGEoC,EAAa,CACxBrE,MAAO,gBACPH,OAAQ,aACRH,MAAO,iBAGI4E,EAAwB,CACnClG,MAAO,mCACPC,KAAM,iCACNC,MAAO,mCACPC,OAAQ,qCACRC,KAAM,iCACNC,OAAQ,qCACRC,IAAK,+BACLC,OAAQ,qCACRK,SAAU,GACVF,UAAW,GACXC,WAAY,GACZH,WAAY,GACZC,WAAY,IA8BD0F,EAA8B,SAAC1D,OAWzB2D,SATZ3D,GACH1B,UAAW6B,eAETH,EAAMyB,SAAW8B,EAAcvD,EAAMyB,SACrCzB,EAAMC,MAAQuD,EAAWxD,EAAMC,MAC/BD,EAAMI,OAASqD,EAAYzD,EAAMI,2BAK9BC,yCAAWsD,KAGpBD,EAAMlD,YAAc,YCrEPoD,EAAiB,CAC5BhD,OAAQ,cACRQ,QAAS,uBAGEyC,EAAc,CACzB1E,MAAO,iBACPH,OAAQ,cACRH,MAAO,kBAGIiF,EAAyB,CACpCvG,MAAO,oBACPC,KAAM,mBACNC,MAAO,oBACPC,OAAQ,qBACRC,KAAM,mBACNC,OAAQ,qBACRC,IAAK,kBACLC,OAAQ,qBACRK,SAAU,GACVF,UAAW,GACXC,WAAY,GACZH,WAAY,GACZC,WAAY,IA8BD+F,EAAgC,SAAC/D,OAW3B2D,SATZ3D,GACH1B,UAAW6B,EACT,cACAH,EAAMyB,SAAWmC,EAAe5D,EAAMyB,SACtCzB,EAAMC,MAAQ4D,EAAY7D,EAAMC,MAChCD,EAAMI,OAAS0D,EAAa9D,EAAMI,2BAOpCC,uBAAK+C,MAAO,CAAEY,SAAU,aACtB3D,0CAAYsD,IACZtD,uBAAK/B,yCAA0C0B,EAAMI,OACnDC,uBACE4D,QAAQ,YACRC,UAAU,QACVC,KAAK,6BACO,QAEZ9D,wBACE+D,KAAK,eACLC,EAAE,qDAQdN,EAAOvD,YAAc,aCxFR8D,EAAgBlG,EAchBmG,EAAkC,SAACvE,OACxCE,OACDF,GACH1B,0BAA2BgG,EAActE,EAAMI,gBAG1CC,sCAAQH,KAGjBqE,EAAQ/D,YAAc,cCvBTgE,EAAwB,CACnCjH,MAAO,mBACPC,KAAM,kBACNC,MAAO,mBACPC,OAAQ,oBACRC,KAAM,kBACNC,OAAQ,oBACRC,IAAK,iBACLC,OAAQ,oBACRK,SAAU,GACVF,UAAW,GACXC,WAAY,GACZH,WAAY,GACZC,WAAY,IAkBDyG,EAA8B,SAACzE,OACpCE,OACDF,GACH1B,wBAAyBkG,EAAYxE,EAAMI,gBAGtCC,uCAAOqE,KAAK,SAAYxE,KAGjCuE,EAAMjE,YAAc,YCvCPmE,EAA2B,CACtCpH,MAAO,sBACPC,KAAM,qBACNC,MAAO,sBACPC,OAAQ,uBACRC,KAAM,qBACNC,OAAQ,uBACRC,IAAK,oBACLC,OAAQ,uBACRK,SAAU,GACVF,UAAW,GACXC,WAAY,GACZH,WAAY,GACZC,WAAY,IAmBD4G,EAAoC,SAAC5E,OAC1CE,OACDF,GACH1B,UAAW6B,kBAAoBH,EAAMI,OAASuE,EAAe3E,EAAMI,iBAG9DC,uCAAOqE,KAAK,YAAexE,KAGpC0E,EAASpE,YAAc,eC1CVqE,EAAyB,CACpCtH,MAAO,oBACPC,KAAM,mBACNC,MAAO,oBACPC,OAAQ,qBACRC,KAAM,mBACNC,OAAQ,qBACRC,IAAK,kBACLC,OAAQ,qBACRK,SAAU,GACVF,UAAW,GACXC,WAAY,GACZH,WAAY,GACZC,WAAY,IAyBD8G,EAAgC,SAAC9E,OACtCE,OACDF,GACH1B,uCAAwCuG,EAAa7E,EAAMI,gBAGtDC,uCAAOqE,KAAK,YAAexE,KAGpC4E,EAAOtE,YAAc,aC7CRuE,EAAmB,CAC9BnE,OAAQ,GACRoE,SAAU,sBAICC,EAAe,CAC1BrE,OAAQ,GACRoB,OAAQ,oBAyBGkD,EAA4B,SAAClF,OAClCmF,EAAahF,EACjB,YACAH,EAAM1B,UACN0B,EAAMoF,aAAeL,EAAiB/E,EAAMoF,aAC5CpF,EAAMyB,SAAWwD,EAAajF,EAAMyB,SAEpCzB,EAAMI,OAASJ,EAAMyB,SAAWrD,EAAa4B,EAAMI,eAInDC,gBAACa,mBAAQlB,GAAO1B,UAAW6G,IACxBnF,EAAMO,WAKb2E,EAAK1E,YAAc,WCnDN6E,EAAuB,CAClC9H,MAAO,kBACPC,KAAM,iBACNC,MAAO,kBACPC,OAAQ,mBACRC,KAAM,iBACNC,OAAQ,mBACRC,IAAK,gBACLC,OAAQ,mBACRK,SAAU,GACVF,UAAW,GACXC,WAAY,GACZH,WAAY,GACZC,WAAY,IAeDsH,EAA4B,SAACtF,OAClCE,OACDF,GACH1B,UAAW6B,EAAG,YAAaH,EAAMI,OAASiF,EAAWrF,EAAMI,iBAGtDC,sCAAQH,KAGjBoF,EAAK9E,YAAc,WCrCN+E,EAAwB,CACnChI,MAAO,mBACPC,KAAM,kBACNC,MAAO,mBACPC,OAAQ,oBACRC,KAAM,kBACNC,OAAQ,oBACRC,IAAK,iBACLC,OAAQ,oBACRK,SAAU,GACVF,UAAW,GACXC,WAAY,GACZH,WAAY,GACZC,WAAY,IAGDwH,EAAgB,CAC3B5E,OAAQ,aACR6E,QAAS,sBAsBEC,EAA8B,SAAC1F,OACpCE,OACDF,GACH1B,UAAW6B,EACT,aACAH,EAAMyB,SAAW+D,EAAcxF,EAAMyB,SACrCzB,EAAMI,OAASmF,EAAYvF,EAAMI,iBAI9BC,yCAAWH,KAGpBwF,EAAMlF,YAAc,YCrDPmF,EAAuB,CAClCpI,MAAO,kBACPC,KAAM,iBACNC,MAAO,kBACPC,OAAQ,mBACRC,KAAM,iBACNC,OAAQ,mBACRC,IAAK,gBACLC,OAAQ,mBACRK,SAAU,GACVF,UAAW,GACXC,WAAY,GACZH,WAAY,GACZC,WAAY,IAGD4H,EAAe,CAC1BC,UAAW,sBACXC,QAAS,qBAsBEC,EAA4B,SAAC/F,OAClCE,OACDF,GACH1B,UAAW6B,EACT,YACAH,EAAMyB,SAAWmE,EAAa5F,EAAMyB,SACpCzB,EAAMI,OAASuF,EAAW3F,EAAMI,iBAK3BC,gBADa,cAAlBL,EAAMyB,mCACOvB,KAMnB6F,EAAKvF,YAAc,sPdmB2B,SAACR,eACvCE,OACDF,GAEH1B,UAAW6B,cAETM,WAAUT,EAAMC,QAAQ,UACxBU,WAAYX,EAAMiB,UAAU,UAC5BF,WAAWf,EAAMI,SAAS,SAC1Bd,WAAeU,EAAMvB,WAAW,oBAI7B4B,qCAAOH,GAAaF,EAAMO"}